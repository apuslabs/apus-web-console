exports.id = 637;
exports.ids = [637];
exports.modules = {

/***/ 25730:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 31232, 23));
Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 52987, 23));
Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 50831, 23));
Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 56926, 23));
Promise.resolve(/* import() eager */).then(__webpack_require__.t.bind(__webpack_require__, 44282, 23))

/***/ }),

/***/ 43283:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

Promise.resolve(/* import() eager */).then(__webpack_require__.bind(__webpack_require__, 32375))

/***/ }),

/***/ 32375:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ RootLayout)
});

// EXTERNAL MODULE: external "next/dist/compiled/react/jsx-runtime"
var jsx_runtime_ = __webpack_require__(56786);
// EXTERNAL MODULE: ./node_modules/next/font/google/target.css?{"path":"src/app/layout.tsx","import":"Roboto_Flex","arguments":[{"subsets":["latin"],"weight":["400","500","600","700"]}],"variableName":"robotoFlex"}
var layout_tsx_import_Roboto_Flex_arguments_subsets_latin_weight_400_500_600_700_variableName_robotoFlex_ = __webpack_require__(58127);
var layout_tsx_import_Roboto_Flex_arguments_subsets_latin_weight_400_500_600_700_variableName_robotoFlex_default = /*#__PURE__*/__webpack_require__.n(layout_tsx_import_Roboto_Flex_arguments_subsets_latin_weight_400_500_600_700_variableName_robotoFlex_);
// EXTERNAL MODULE: ./src/app/globals.css
var globals = __webpack_require__(23824);
// EXTERNAL MODULE: ./node_modules/sonner/dist/index.js
var dist = __webpack_require__(5204);
// EXTERNAL MODULE: ./src/contexts/web3.ts
var web3 = __webpack_require__(14653);
// EXTERNAL MODULE: ./node_modules/@mui/joy/node/styles/index.js
var styles = __webpack_require__(9906);
// EXTERNAL MODULE: ./node_modules/@mui/joy/node/index.js
var node = __webpack_require__(3044);
// EXTERNAL MODULE: external "next/dist/compiled/react"
var react_ = __webpack_require__(18038);
var react_default = /*#__PURE__*/__webpack_require__.n(react_);
// EXTERNAL MODULE: ./node_modules/@ant-design/cssinjs/lib/index.js
var lib = __webpack_require__(64021);
// EXTERNAL MODULE: ./node_modules/next/navigation.js
var navigation = __webpack_require__(57114);
;// CONCATENATED MODULE: ./src/lib/AntdRegistry.tsx
/* __next_internal_client_entry_do_not_use__ default auto */ 



const StyledComponentsRegistry = ({ children })=>{
    const cache = react_default().useMemo(()=>(0,lib.createCache)(), []);
    (0,navigation.useServerInsertedHTML)(()=>/*#__PURE__*/ jsx_runtime_.jsx("style", {
            id: "antd",
            dangerouslySetInnerHTML: {
                __html: (0,lib.extractStyle)(cache, true)
            }
        }));
    return /*#__PURE__*/ jsx_runtime_.jsx(lib.StyleProvider, {
        cache: cache,
        children: children
    });
};
/* harmony default export */ const AntdRegistry = (StyledComponentsRegistry);

// EXTERNAL MODULE: ./node_modules/antd/lib/config-provider/index.js
var config_provider = __webpack_require__(34791);
;// CONCATENATED MODULE: ./src/app/theme.ts
const antdTheme = {
    token: {
        colorPrimary: "#0097ff"
    }
};

// EXTERNAL MODULE: ./node_modules/next/script.js
var script = __webpack_require__(51949);
var script_default = /*#__PURE__*/__webpack_require__.n(script);
;// CONCATENATED MODULE: ./src/app/layout.tsx
/* __next_internal_client_entry_do_not_use__ default auto */ 










// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }
function ProviderContext({ children }) {
    const web3Context = (0,web3/* useWeb3Context */.Z_)();
    return /*#__PURE__*/ (0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
        children: [
            /*#__PURE__*/ jsx_runtime_.jsx((script_default()), {
                src: "https://cdnjs.cloudflare.com/ajax/libs/web3/4.0.1-alpha.5/web3.min.js",
                onReady: web3Context.initWeb3
            }),
            /*#__PURE__*/ jsx_runtime_.jsx(styles.StyledEngineProvider, {
                injectFirst: true,
                children: /*#__PURE__*/ (0,jsx_runtime_.jsxs)(web3/* Web3ContextProvider */.vP, {
                    value: web3Context,
                    children: [
                        /*#__PURE__*/ jsx_runtime_.jsx(node.CssBaseline, {}),
                        /*#__PURE__*/ jsx_runtime_.jsx(node.GlobalStyles, {
                            styles: (theme)=>`
        [data-sonner-toaster][data-theme] {
          font-family: ${theme.vars.fontFamily.body};
          font-size: ${theme.fontSize.md};
          --border-radius: ${theme.vars.radius.sm};
          --normal-bg: ${theme.vars.palette.background.surface};
          --normal-border: ${theme.vars.palette.divider};
          --normal-text: ${theme.vars.palette.text.primary};
          --success-bg: ${theme.vars.palette.success.softBg};
          --success-border: rgb(${theme.vars.palette.success.mainChannel} / 0.2);
          --success-text: ${theme.vars.palette.success.softColor};
          --error-bg: ${theme.vars.palette.danger.softBg};
          --error-border: rgb(${theme.vars.palette.danger.mainChannel} / 0.2);
          --error-text: ${theme.vars.palette.danger.softColor};
          --gray1: ${theme.vars.palette.neutral[50]};
          --gray2: ${theme.vars.palette.neutral[100]};
          --gray3: ${theme.vars.palette.neutral[200]};
          --gray4: ${theme.vars.palette.neutral[300]};
          --gray5: ${theme.vars.palette.neutral[400]};
          --gray6: ${theme.vars.palette.neutral[500]};
          --gray7: ${theme.vars.palette.neutral[600]};
          --gray8: ${theme.vars.palette.neutral[700]};
          --gray9: ${theme.vars.palette.neutral[800]};
          --gray10: ${theme.vars.palette.neutral[900]};
        }
        &.sonner-toast-warn {
          --normal-bg: ${theme.vars.palette.warning.softBg};
          --normal-border: rgb(${theme.vars.palette.warning.mainChannel} / 0.2);
          --normal-text: ${theme.vars.palette.warning.softColor};
        }
      `
                        }),
                        /*#__PURE__*/ jsx_runtime_.jsx(AntdRegistry, {
                            children: /*#__PURE__*/ jsx_runtime_.jsx(config_provider["default"], {
                                theme: antdTheme,
                                children: children
                            })
                        }),
                        /*#__PURE__*/ jsx_runtime_.jsx(dist.Toaster, {
                            position: "top-center",
                            richColors: true,
                            closeButton: true
                        })
                    ]
                })
            })
        ]
    });
}
function RootLayout({ children }) {
    return /*#__PURE__*/ jsx_runtime_.jsx("html", {
        lang: "en",
        id: "app",
        children: /*#__PURE__*/ jsx_runtime_.jsx("body", {
            className: (layout_tsx_import_Roboto_Flex_arguments_subsets_latin_weight_400_500_600_700_variableName_robotoFlex_default()).className,
            children: /*#__PURE__*/ jsx_runtime_.jsx(ProviderContext, {
                children: children
            })
        })
    });
}


/***/ }),

/***/ 38023:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ SvgImage)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52451);
/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_1__);


function SvgImage({ src, alt, size }) {
    return /*#__PURE__*/ react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx((next_image__WEBPACK_IMPORTED_MODULE_1___default()), {
        src: src.src,
        width: size || src.width,
        height: size || src.height,
        alt: alt
    });
}


/***/ }),

/***/ 93019:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Zk: () => (/* binding */ useTerminateLease),
/* harmony export */   Zm: () => (/* binding */ helperContractABI),
/* harmony export */   bh: () => (/* binding */ useRent),
/* harmony export */   cG: () => (/* binding */ accountContractAddress),
/* harmony export */   e2: () => (/* binding */ useStake),
/* harmony export */   pC: () => (/* binding */ helperContractAddress),
/* harmony export */   q9: () => (/* binding */ accountContractABI),
/* harmony export */   ql: () => (/* binding */ useUnStake),
/* harmony export */   sd: () => (/* binding */ useOnline),
/* harmony export */   wt: () => (/* binding */ useUnList),
/* harmony export */   zX: () => (/* binding */ useRenewal)
/* harmony export */ });
/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39810);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(83689);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);



const accountContractAddress = "0x7592A188A064395E54b2E7fE01b5C5554569D111";
const accountContractABI = [
    {
        "inputs": [],
        "name": "cancellation",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "user",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "_stakeAmount",
                "type": "uint256"
            }
        ],
        "name": "offlineUnBlockedFund",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "user",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "_stakeAmount",
                "type": "uint256"
            }
        ],
        "name": "onlineBlockedFund",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
    },
    {
        "inputs": [],
        "name": "register",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "addr",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "providerBlockedFunds",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "recipientBlockedFunds",
                        "type": "uint256"
                    },
                    {
                        "internalType": "string",
                        "name": "info",
                        "type": "string"
                    }
                ],
                "internalType": "struct AccountFactory.accountInfo",
                "name": "accountinfo",
                "type": "tuple"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "user",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "_stakeAmount",
                "type": "uint256"
            }
        ],
        "name": "rentBlockedFund",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_recipient",
                "type": "address"
            },
            {
                "internalType": "address",
                "name": "_provider",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "_stakeAmount",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "_unBlockedAmount",
                "type": "uint256"
            }
        ],
        "name": "rentUnBlockedFund",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_info",
                "type": "string"
            }
        ],
        "name": "setProviderInfo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "stake",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            }
        ],
        "name": "unstake",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_addr",
                "type": "address"
            }
        ],
        "name": "getAccount",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "addr",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "providerBlockedFunds",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "recipientBlockedFunds",
                        "type": "uint256"
                    },
                    {
                        "internalType": "string",
                        "name": "info",
                        "type": "string"
                    }
                ],
                "internalType": "struct AccountFactory.accountInfo",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_user",
                "type": "address"
            }
        ],
        "name": "isRegister",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
];
const helperContractAddress = "0x976DE5a7aa0304D9F2F4a90De3A8c7C00629206b";
const helperContractABI = [
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_deviceId",
                "type": "uint256"
            }
        ],
        "name": "offlineServer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_machineId",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "_serverInfo",
                "type": "string"
            },
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "serverPrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "storagePrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "upbandWidth",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "downbandWidth",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct Price",
                "name": "_price",
                "type": "tuple"
            },
            {
                "internalType": "uint256",
                "name": "_startTime",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "_endTime",
                "type": "uint256"
            }
        ],
        "name": "onlineServer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_leaseId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "_endTime",
                "type": "uint256"
            }
        ],
        "name": "RenewalLeaseServer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_deviceId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "_endTime",
                "type": "uint256"
            }
        ],
        "name": "rentServer",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_leaseId",
                "type": "uint256"
            }
        ],
        "name": "terminateInstance",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_leaseId",
                "type": "uint256"
            }
        ],
        "name": "terminateLease",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "leaseId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "startTime",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "expireTime",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "deviceId",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct leaseInfo",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_accountFactoryAddress",
                "type": "address"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "account_contract",
        "outputs": [
            {
                "internalType": "contract AccountFactory",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "a",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "b",
                "type": "string"
            }
        ],
        "name": "concatenateStrings",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "pure",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "devices",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
            },
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            },
            {
                "internalType": "enum DeviceStatus",
                "name": "status",
                "type": "uint8"
            },
            {
                "internalType": "string",
                "name": "machineId",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "serverInfo",
                "type": "string"
            },
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "serverPrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "storagePrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "upbandWidth",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "downbandWidth",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct Price",
                "name": "price",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getAll",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "user",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "leaseId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "providerBlockedFund",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "recipientBlockedFunds",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "enum billingStatus",
                        "name": "status",
                        "type": "uint8"
                    },
                    {
                        "internalType": "enum billingType",
                        "name": "billType",
                        "type": "uint8"
                    }
                ],
                "internalType": "struct billingInfo[]",
                "name": "",
                "type": "tuple[]"
            },
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "user",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "leaseId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "providerBlockedFund",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "recipientBlockedFunds",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "enum billingStatus",
                        "name": "status",
                        "type": "uint8"
                    },
                    {
                        "internalType": "enum billingType",
                        "name": "billType",
                        "type": "uint8"
                    }
                ],
                "internalType": "struct billingInfo[]",
                "name": "",
                "type": "tuple[]"
            },
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "leaseId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "startTime",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "expireTime",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "deviceId",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct leaseInfo[]",
                "name": "",
                "type": "tuple[]"
            },
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "leaseId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "startTime",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "expireTime",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "deviceId",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct leaseInfo[]",
                "name": "",
                "type": "tuple[]"
            },
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "enum DeviceStatus",
                        "name": "status",
                        "type": "uint8"
                    },
                    {
                        "internalType": "string",
                        "name": "machineId",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "serverInfo",
                        "type": "string"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "serverPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "storagePrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "upbandWidth",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "downbandWidth",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct Price",
                        "name": "price",
                        "type": "tuple"
                    }
                ],
                "internalType": "struct deviceInfo[]",
                "name": "",
                "type": "tuple[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_deviceId",
                "type": "uint256"
            }
        ],
        "name": "getDevice",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "enum DeviceStatus",
                        "name": "status",
                        "type": "uint8"
                    },
                    {
                        "internalType": "string",
                        "name": "machineId",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "serverInfo",
                        "type": "string"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "serverPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "storagePrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "upbandWidth",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "downbandWidth",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct Price",
                        "name": "price",
                        "type": "tuple"
                    }
                ],
                "internalType": "struct deviceInfo",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_deviceId",
                "type": "uint256"
            }
        ],
        "name": "getLeaseByDeviceId",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "leaseId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "startTime",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "expireTime",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "deviceId",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct leaseInfo",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_leaseId",
                "type": "uint256"
            }
        ],
        "name": "getProviderBillingByLeaseId",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "user",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "leaseId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "providerBlockedFund",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "recipientBlockedFunds",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "enum billingStatus",
                        "name": "status",
                        "type": "uint8"
                    },
                    {
                        "internalType": "enum billingType",
                        "name": "billType",
                        "type": "uint8"
                    }
                ],
                "internalType": "struct billingInfo",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_leaseId",
                "type": "uint256"
            }
        ],
        "name": "getRecipientBillingByLeaseId",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "address",
                        "name": "user",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "leaseId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "providerBlockedFund",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "recipientBlockedFunds",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "enum billingStatus",
                        "name": "status",
                        "type": "uint8"
                    },
                    {
                        "internalType": "enum billingType",
                        "name": "billType",
                        "type": "uint8"
                    }
                ],
                "internalType": "struct billingInfo",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "leaseProvider",
        "outputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "leaseId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "startTime",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "expireTime",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "deviceId",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "leaseRecipient",
        "outputs": [
            {
                "internalType": "address",
                "name": "owner",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "leaseId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "startTime",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "expireTime",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "deviceId",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_limit",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "_offset",
                "type": "uint256"
            }
        ],
        "name": "listDevices",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "enum DeviceStatus",
                        "name": "status",
                        "type": "uint8"
                    },
                    {
                        "internalType": "string",
                        "name": "machineId",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "serverInfo",
                        "type": "string"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "serverPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "storagePrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "upbandWidth",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "downbandWidth",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct Price",
                        "name": "price",
                        "type": "tuple"
                    }
                ],
                "internalType": "struct deviceInfo[]",
                "name": "_allDevices",
                "type": "tuple[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_provider",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "_limit",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "_offset",
                "type": "uint256"
            }
        ],
        "name": "listOwnDevices",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "enum DeviceStatus",
                        "name": "status",
                        "type": "uint8"
                    },
                    {
                        "internalType": "string",
                        "name": "machineId",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "serverInfo",
                        "type": "string"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "serverPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "storagePrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "upbandWidth",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "downbandWidth",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct Price",
                        "name": "price",
                        "type": "tuple"
                    }
                ],
                "internalType": "struct deviceInfo[]",
                "name": "_ownDevices",
                "type": "tuple[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "platformSharingRatio",
        "outputs": [
            {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "providerBillings",
        "outputs": [
            {
                "internalType": "address",
                "name": "user",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "leaseId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "providerBlockedFund",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "recipientBlockedFunds",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            },
            {
                "internalType": "enum billingStatus",
                "name": "status",
                "type": "uint8"
            },
            {
                "internalType": "enum billingType",
                "name": "billType",
                "type": "uint8"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_startTime",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "_endTime",
                "type": "uint256"
            },
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "serverPrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "storagePrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "upbandWidth",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "downbandWidth",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct Price",
                "name": "_price",
                "type": "tuple"
            }
        ],
        "name": "providerStakeCalcute",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "pure",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "recipientBillings",
        "outputs": [
            {
                "internalType": "address",
                "name": "user",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "leaseId",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "providerBlockedFund",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "recipientBlockedFunds",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
            },
            {
                "internalType": "enum billingStatus",
                "name": "status",
                "type": "uint8"
            },
            {
                "internalType": "enum billingType",
                "name": "billType",
                "type": "uint8"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "_startTime",
                "type": "uint256"
            },
            {
                "internalType": "uint256",
                "name": "_endTime",
                "type": "uint256"
            },
            {
                "components": [
                    {
                        "internalType": "uint256",
                        "name": "serverPrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "storagePrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "upbandWidth",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "downbandWidth",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct Price",
                "name": "_price",
                "type": "tuple"
            }
        ],
        "name": "recipientStakeCalcute",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "pure",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "number",
                "type": "uint256"
            }
        ],
        "name": "uintToString",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "pure",
        "type": "function"
    }
];
function useStake(contract) {
    const [isStaking, setIsStaking] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    return {
        stake: (address, value)=>new Promise((resolve, reject)=>{
                if (!contract) {
                    reject("contract is null");
                }
                setIsStaking(true);
                try {
                    contract?.methods.stake().send({
                        from: address,
                        value: web3__WEBPACK_IMPORTED_MODULE_0__/* ["default"].utils.toWei */ .ZPm.utils.toWei(value, "ether"),
                        gas: BigInt(10000000).toString(),
                        gasPrice: BigInt(800000000).toString()
                    }).on("error", (error)=>{
                        reject(error);
                    }).on("confirmation", (e)=>{
                        if (e.receipt.status === BigInt(1)) {
                            resolve(e);
                        } else {
                            reject(e);
                        }
                    });
                } catch (e) {
                    reject(e);
                } finally{
                    setIsStaking(false);
                }
            }),
        isStaking
    };
}
function useUnStake(contract) {
    const [isUnStaking, setIsUnStaking] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    return {
        unstake: (address, value)=>new Promise((resolve, reject)=>{
                if (!contract) {
                    reject("contract is null");
                }
                setIsUnStaking(true);
                try {
                    contract?.methods.unstake(web3__WEBPACK_IMPORTED_MODULE_0__/* ["default"].utils.toWei */ .ZPm.utils.toWei(value, "ether")).send({
                        from: address,
                        gas: BigInt(10000000).toString(),
                        gasPrice: BigInt(800000000).toString()
                    }).on("error", (error)=>{
                        reject(error);
                    }).on("confirmation", (e)=>{
                        if (e.receipt.status === BigInt(1)) {
                            resolve(e);
                        } else {
                            reject(e);
                        }
                    });
                } catch (e) {
                    reject(e);
                } finally{
                    setIsUnStaking(false);
                }
            }),
        isUnStaking
    };
}
function useRent(contract) {
    const [isRenting, setIsRenting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    return {
        rent: (address, server_id, endDate)=>new Promise((resolve, reject)=>{
                if (!contract) {
                    reject("contract is null");
                }
                setIsRenting(true);
                try {
                    console.log(server_id, endDate.unix(), address);
                    contract?.methods.rentServer(server_id, endDate.unix()).send({
                        from: address,
                        gas: BigInt(10000000).toString(),
                        gasPrice: BigInt(800000000).toString()
                    }).on("error", (error)=>{
                        reject(error);
                    }).on("confirmation", (e)=>{
                        if (e.receipt.status === BigInt(1)) {
                            resolve(e);
                        } else {
                            reject(e);
                        }
                    });
                } catch (e) {
                    reject(e);
                } finally{
                    setIsRenting(false);
                }
            }),
        isRenting
    };
}
function useRenewal(contract) {
    const [isRenewaling, setIsRenewaling] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    return {
        renewal: (address, server_id, endDate)=>new Promise((resolve, reject)=>{
                if (!contract) {
                    reject("contract is null");
                }
                setIsRenewaling(true);
                try {
                    console.log(server_id, endDate.unix(), address);
                    const endDateUnix = endDate.unix();
                    console.log(server_id, endDateUnix, address);
                    contract?.methods.RenewalLeaseServer(server_id, endDateUnix).send({
                        from: address,
                        gas: BigInt(10000000).toString(),
                        gasPrice: BigInt(800000000).toString()
                    }).on("error", (error)=>{
                        reject(error);
                    }).on("confirmation", (e)=>{
                        if (e.receipt.status === BigInt(1)) {
                            resolve(e);
                        } else {
                            reject(e);
                        }
                    });
                } catch (e) {
                    reject(e);
                } finally{
                    setIsRenewaling(false);
                }
            }),
        isRenewaling
    };
}
function useTerminateLease(contract) {
    const [isTerminating, setIsTerminating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    return {
        terminateLease: (address, server_id)=>{
            return new Promise((resolve, reject)=>{
                if (!contract) {
                    reject("contract is null");
                }
                setIsTerminating(true);
                try {
                    console.log(server_id, address);
                    contract?.methods.terminateInstance(server_id).send({
                        from: address,
                        gas: BigInt(10000000).toString(),
                        gasPrice: BigInt(800000000).toString()
                    }).on("error", (error)=>{
                        reject(error);
                    }).on("confirmation", (e)=>{
                        if (e.receipt.status === BigInt(1)) {
                            resolve(e);
                        } else {
                            reject(e);
                        }
                    });
                } catch (e) {
                    reject(e);
                } finally{
                    setIsTerminating(false);
                }
            });
        },
        isTerminating
    };
}
function useUnList(contract) {
    const [isUnListing, setIsUnListing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    return {
        unList: (address, server_id)=>new Promise((resolve, reject)=>{
                setIsUnListing(true);
                try {
                    console.log(server_id, address);
                    contract?.methods.offlineServer(server_id).send({
                        from: address,
                        gas: BigInt(10000000).toString(),
                        gasPrice: BigInt(800000000).toString()
                    }).on("error", (error)=>{
                        reject(error);
                    }).on("confirmation", (e)=>{
                        if (e.receipt.status === BigInt(1)) {
                            resolve(e);
                        } else {
                            reject(e);
                        }
                    });
                } catch (e) {
                    reject(e);
                } finally{
                    setIsUnListing(false);
                }
            }),
        isUnListing
    };
}
function useOnline(contract) {
    const [isOnlining, setIsOnlining] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    return {
        online: async (address, server_id, server_info, price, endDate)=>{
            try {
                setIsOnlining(true);
                const server_price = web3__WEBPACK_IMPORTED_MODULE_0__/* ["default"].utils.toWei */ .ZPm.utils.toWei(price.server_price, "ether");
                const storage_price = web3__WEBPACK_IMPORTED_MODULE_0__/* ["default"].utils.toWei */ .ZPm.utils.toWei(price.storage_price, "ether");
                const upband_width = web3__WEBPACK_IMPORTED_MODULE_0__/* ["default"].utils.toWei */ .ZPm.utils.toWei(price.upband_width, "ether");
                const downband_width = web3__WEBPACK_IMPORTED_MODULE_0__/* ["default"].utils.toWei */ .ZPm.utils.toWei(price.downband_width, "ether");
                return new Promise((resolve, reject)=>{
                    try {
                        console.log(server_id, server_info, {
                            serverPrice: server_price,
                            storagePrice: storage_price,
                            upbandWidth: upband_width,
                            downbandWidth: downband_width
                        }, address);
                        contract?.methods.onlineServer(server_id, server_info, {
                            serverPrice: server_price,
                            storagePrice: storage_price,
                            upbandWidth: upband_width,
                            downbandWidth: downband_width
                        }, dayjs__WEBPACK_IMPORTED_MODULE_2___default()().unix(), endDate.unix()).send({
                            from: address,
                            gas: BigInt(10000000).toString(),
                            gasPrice: BigInt(800000000).toString()
                        }).on("error", (error)=>{
                            reject(error);
                        }).on("confirmation", (e)=>{
                            if (e.receipt.status === BigInt(1)) {
                                resolve(e);
                            } else {
                                reject(e);
                            }
                        });
                    } catch (e) {
                        reject(e);
                    }
                });
            } catch (e) {
                return Promise.reject(e);
            } finally{
                setIsOnlining(false);
            }
        },
        isOnlining
    };
}


/***/ }),

/***/ 14653:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z_: () => (/* binding */ useWeb3Context),
/* harmony export */   lr: () => (/* binding */ web3Context),
/* harmony export */   vP: () => (/* binding */ Web3ContextProvider)
/* harmony export */ });
/* unused harmony exports web3, accountContract, helperContract */
/* harmony import */ var _constant_contract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93019);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39810);
/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(97146);
/* harmony import */ var _utils_fetcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40045);
/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5204);
/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(sonner__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(57114);
/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_navigation__WEBPACK_IMPORTED_MODULE_6__);
/* __next_internal_client_entry_do_not_use__ web3Context,Web3ContextProvider,web3,accountContract,helperContract,useWeb3Context auto */ 






const web3Context = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);
const Web3ContextProvider = web3Context.Provider;
let web3;
let accountContract;
let helperContract;
function useWeb3Context() {
    const [hasMetamask, setHasMetamask] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [account, setAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("");
    const [balance, setBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("0.");
    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_6__.useRouter)();
    const pathname = (0,next_navigation__WEBPACK_IMPORTED_MODULE_6__.usePathname)();
    const { data: accountInfo, isLoading, mutate: refreshAccountInfo } = (0,swr__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP)(account ? [
        "/apus/account/info",
        {
            address: account
        }
    ] : null, _utils_fetcher__WEBPACK_IMPORTED_MODULE_4__/* .getFetcher */ .p, {
        onSuccess: (data)=>{
            if (data.code === 200 && pathname === "/console/signin") {
                router.push("/console/dashboard/market");
            }
        }
    });
    const [isConnecting, setIsConnecting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const initWeb3 = ()=>{
        if (window.ethereum !== undefined && !web3) {
            web3 = new window.Web3(window.ethereum);
            accountContract = new web3.eth.Contract(_constant_contract__WEBPACK_IMPORTED_MODULE_0__/* .accountContractABI */ .q9, _constant_contract__WEBPACK_IMPORTED_MODULE_0__/* .accountContractAddress */ .cG);
            helperContract = new web3.eth.Contract(_constant_contract__WEBPACK_IMPORTED_MODULE_0__/* .helperContractABI */ .Zm, _constant_contract__WEBPACK_IMPORTED_MODULE_0__/* .helperContractAddress */ .pC);
        }
    };
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        if (window.ethereum !== undefined) {
            setHasMetamask(true);
        }
    }, []);
    const initAccount = async (requestAccount)=>{
        if (window.ethereum !== undefined) {
            try {
                const accounts = await window.ethereum.request({
                    method: requestAccount ? "eth_requestAccounts" : "eth_accounts"
                });
                if (!accounts?.length) {
                    return {
                        account: "",
                        balance: "0"
                    };
                }
                const account = web3__WEBPACK_IMPORTED_MODULE_2__/* ["default"].utils.toChecksumAddress */ .ZPm.utils.toChecksumAddress(accounts[0]);
                setAccount(account);
                const balance = await window.ethereum.request({
                    method: "eth_getBalance",
                    params: [
                        account,
                        "latest"
                    ]
                });
                const etherBalance = web3__WEBPACK_IMPORTED_MODULE_2__/* ["default"].utils.fromWei */ .ZPm.utils.fromWei(balance, "ether");
                setBalance(etherBalance);
                return {
                    account,
                    balance: etherBalance
                };
            } catch (e) {
                console.error(e);
            }
        }
        return {
            account: "",
            balance: "0"
        };
    };
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        initAccount();
        window.ethereum.on("accountsChanged", (accounts)=>{
            initAccount();
        });
        return ()=>{
            window.ethereum.removeAllListeners("accountsChanged");
        };
    }, []);
    const connectMetamask = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{
        if (web3) {
            setIsConnecting(true);
            try {
                const { account, balance } = await initAccount(true);
                if (Number(balance) <= 0) {
                    sonner__WEBPACK_IMPORTED_MODULE_5__.toast.error("Your need to have some ETH to register");
                    return;
                }
                await accountContract?.methods.register().send({
                    from: account,
                    gas: BigInt(10000000).toString(),
                    gasPrice: BigInt(800000000).toString()
                }).on("error", console.error).on("confirmation", (e)=>{
                    if (e.receipt.status === BigInt(1)) {
                        sonner__WEBPACK_IMPORTED_MODULE_5__.toast.success("Sing up successfully");
                        accountContract?.methods?.getAccount;
                        refreshAccountInfo();
                    }
                });
            } catch (e) {
                console.error(e);
            } finally{
                setIsConnecting(false);
            }
        }
    }, [
        refreshAccountInfo,
        router,
        web3
    ]);
    return {
        initWeb3,
        refreshAccount: initAccount,
        hasMetamask,
        isLogin: accountInfo?.code === 200,
        needLogin: !isLoading && accountInfo?.code === 400,
        connectMetamask,
        account,
        web3,
        accountContract: accountContract,
        helperContract: helperContract,
        balance,
        accountInfo: {
            balance: web3__WEBPACK_IMPORTED_MODULE_2__/* ["default"].utils.fromWei */ .ZPm.utils.fromWei(accountInfo?.data?.balance || "0", "ether"),
            recipient_blocked_funds: web3__WEBPACK_IMPORTED_MODULE_2__/* ["default"].utils.fromWei */ .ZPm.utils.fromWei(accountInfo?.data?.recipient_blocked_funds || "0", "ether"),
            provider_blocked_funds: web3__WEBPACK_IMPORTED_MODULE_2__/* ["default"].utils.fromWei */ .ZPm.utils.fromWei(accountInfo?.data?.provider_blocked_funds || "0", "ether")
        },
        isProvider: Boolean(accountInfo?.data?.info),
        isConnecting,
        refreshAccountInfo
    };
}


/***/ }),

/***/ 40045:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ getFetcher)
/* harmony export */ });
/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22059);
/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(qs__WEBPACK_IMPORTED_MODULE_0__);
const baseUrl = `http://1.117.58.173:8080`;

const getFetcher = (args)=>{
    let path = "";
    if (typeof args === "string") {
        path = args;
    } else {
        const [url, queryParams] = args;
        path = url + "?" + qs__WEBPACK_IMPORTED_MODULE_0___default().stringify(queryParams);
    }
    return fetch(baseUrl + path, {
        method: "GET",
        headers: {
            "Content-Type": "application/json"
        }
    }).then((res)=>res.json());
};


/***/ }),

/***/ 74053:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $$typeof: () => (/* binding */ $$typeof),
/* harmony export */   __esModule: () => (/* binding */ __esModule),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(61363);

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/home/jax/work/apus-web-console/src/app/layout.tsx`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__default__);

/***/ }),

/***/ 46890:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"src":"/_next/static/media/logo.f9e6830f.svg","height":34,"width":68,"blurWidth":0,"blurHeight":0});

/***/ }),

/***/ 73881:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var next_dist_lib_metadata_get_metadata_route__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80085);
/* harmony import */ var next_dist_lib_metadata_get_metadata_route__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_metadata_get_metadata_route__WEBPACK_IMPORTED_MODULE_0__);
  

  /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((props) => {
    const imageData = {"type":"image/x-icon","sizes":"any"}
    const imageUrl = (0,next_dist_lib_metadata_get_metadata_route__WEBPACK_IMPORTED_MODULE_0__.fillMetadataSegment)(".", props.params, "favicon.ico")

    return [{
      ...imageData,
      url: imageUrl + "",
    }]
  });

/***/ }),

/***/ 23824:
/***/ (() => {



/***/ })

};
;